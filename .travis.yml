dist: bionic
language: cpp

matrix:
  include:
    - name: Linux GCC-7 (Release)
      addons:
        apt:
          sources: ubuntu-toolchain-r-test
          packages: g++-7
      env:
        - JOB_CONFIG="CC=gcc-7 && CXX=g++-7 && BUILD_TYPE=Release"

    - name: Linux GCC-7 (Debug)
      addons:
        apt:
          sources: ubuntu-toolchain-r-test
          packages: g++-7
      env:
        - JOB_CONFIG="CC=gcc-7 && CXX=g++-7 && BUILD_TYPE=Debug"

    - name: Linux GCC-8 (Release)
      addons:
        apt:
          sources: ubuntu-toolchain-r-test
          packages: g++-8
      env:
        - JOB_CONFIG="CC=gcc-8 && CXX=g++-8 && BUILD_TYPE=Release"

    - name: Linux GCC-8 (Debug)
      addons:
        apt:
          sources: ubuntu-toolchain-r-test
          packages: g++-8
      env:
        - JOB_CONFIG="CC=gcc-8 && CXX=g++-8 && BUILD_TYPE=Debug"

    - name: Linux GCC-9 (Release)
      addons:
        apt:
          sources: ubuntu-toolchain-r-test
          packages: g++-9
      env:
        - JOB_CONFIG="CC=gcc-9 && CXX=g++-9 && BUILD_TYPE=Release"

    - name: Linux GCC-9 (Debug)
      addons:
        apt:
          sources: ubuntu-toolchain-r-test
          packages: g++-9
      env:
        - JOB_CONFIG="CC=gcc-9 && CXX=g++-9 && BUILD_TYPE=Debug"

    - name: Linux GCC-10 (Release)
      addons:
        apt:
          sources: ubuntu-toolchain-r-test
          packages: g++-10
      env:
        - JOB_CONFIG="CC=gcc-10 && CXX=g++-10 && BUILD_TYPE=Release"

    - name: Linux GCC-10 (Debug)
      addons:
        apt:
          sources: ubuntu-toolchain-r-test
          packages: g++-10
      env:
        - JOB_CONFIG="CC=gcc-10 && CXX=g++-10 && BUILD_TYPE=Debug"

    - name: Linux Clang-7 (Release)
      addons:
        apt:
          sources:
          - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-bionic-7 main'
            key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages: clang-7
      env:
        - JOB_CONFIG="CC=clang-7 && CXX=clang++-7 && BUILD_TYPE=Release"

    - name: Linux Clang-7 (Debug)
      addons:
        apt:
          sources:
          - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-bionic-7 main'
            key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages: clang-7
      env:
        - JOB_CONFIG="CC=clang-7 && CXX=clang++-7 && BUILD_TYPE=Debug"

    - name: Linux Clang-8 (Release)
      addons:
        apt:
          sources:
          - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-bionic-8 main'
            key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages: clang-8
      env:
        - JOB_CONFIG="CC=clang-8 && CXX=clang++-8 && BUILD_TYPE=Release"

    - name: Linux Clang-8 (Debug)
      addons:
        apt:
          sources:
          - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-bionic-8 main'
            key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages: clang-8
      env:
        - JOB_CONFIG="CC=clang-8 && CXX=clang++-8 && BUILD_TYPE=Debug"

    - name: Linux Clang-9 (Release)
      compiler: clang
      addons:
        apt:
          sources:
          - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-bionic-9 main'
            key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages: clang-9
      env:
        - JOB_CONFIG="CC=clang-9 && CXX=clang++-9 && BUILD_TYPE=Release"

    - name: Linux Clang-9 (Debug)
      compiler: clang
      addons:
        apt:
          sources:
          - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-bionic-9 main'
            key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages: clang-9
      env:
        - JOB_CONFIG="CC=clang-9 && CXX=clang++-9 && BUILD_TYPE=Debug"

    - name: Linux Clang-10 (Release)
      compiler: clang
      addons:
        apt:
          sources:
          - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-bionic-10 main'
            key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages: clang-10
      env:
        - JOB_CONFIG="CC=clang-10 && CXX=clang++-10 && BUILD_TYPE=Release"

    - name: Linux Clang-10 (Debug)
      compiler: clang
      addons:
        apt:
          sources:
          - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-bionic-10 main'
            key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages: clang-10
      env:
        - JOB_CONFIG="CC=clang-10 && CXX=clang++-10 && BUILD_TYPE=Debug"

    - name: Linux GCC (code coverage)
      compiler: gcc
      addons:
        apt:
          sources: ubuntu-toolchain-r-test
          packages: lcov
      env:
        - JOB_CONFIG="BUILD_TYPE=Debug && CODE_COVERAGE=1"
      before_install:
        - pip install --user cpp-coveralls
      after_success:
        - coveralls --verbose -E "/usr/.*" -E ".*/third_party/.*" -E ".*/tests/.*" -E ".*CMakeFiles.*" -E ".*/main.cc"

    - name: Linux GCC (performance tests)
      compiler: gcc
      addons:
        apt:
          sources: ubuntu-toolchain-r-test
          packages: g++-10
      env:
        - JOB_CONFIG="CC=gcc-10 && CXX=g++-10 && BUILD_TYPE=Release && UNIT_TESTS=0 && PERFORMANCE_TESTS=1"
      after_success:
        - cd build ; ./perf_tests ; cd ..

    - name: Linux Clang (performance tests)
      compiler: clang
      addons:
        apt:
          sources:
          - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-bionic-10 main'
            key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages: clang-10
      env:
        - JOB_CONFIG="CC=clang-10 && CXX=clang++-10 && BUILD_TYPE=Release && UNIT_TESTS=0 && PERFORMANCE_TESTS=1"
      after_success:
        - cd build ; ./perf_tests ; cd ..

before_script:
  - eval "${JOB_CONFIG}"
  - $CC --version
  - $CXX --version
  - cmake --version

  # Preparing CMake options
  - if [[ "${UNIT_TESTS}" == "0" ]]; then export CMAKE_OPTIONS="${CMAKE_OPTIONS} -DBUILD_TESTS=OFF"; fi
  - if [[ "${CODE_COVERAGE}" != "" ]]; then export CMAKE_OPTIONS="${CMAKE_OPTIONS} -DCODE_COVERAGE=ON"; fi
  - if [[ -z "${PERFORMANCE_TESTS}" ]]; then export CMAKE_OPTIONS="${CMAKE_OPTIONS} -DPERFORMANCE_TESTS=OFF"; fi

script:
  - mkdir build
  - cd build
  - cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} ${CMAKE_OPTIONS}
  - make
  - ctest --extra-verbose
  - cd ..
